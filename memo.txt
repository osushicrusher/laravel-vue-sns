1.記事一覧を作ろう

・ルーティング
Routeファサードのgetメソッド
Route::get('/', 'ArticleController@index');

・データベースから読み込んだデータはLaravelではオブジェクト型として扱われる

・view(ファイル名, [変数名 => 値]); その他withメソッド、compact関数
return view('articles.index', ['articles' => $articles]);

・@yield('title')とyield('content')nには記事一覧のBladeのtitleセクションとcontentセクションの内容が埋め込められる。

@extends() ベースで使うbladeを宣言する

@section('title', '記事一覧), は@yield('title')に対応する

↓

これらを使うことで

・headタグや scriptタグでのCSSやJavaScriptを、各画面のBladeで都度指定しなくて済む

・その一方で、headタグ内のtitleタグの値を、各画面で異なるものにできる

・@include()で別のビューを取り込む


・migrationファイルの作成
php artisan make:migration create_articles_table --create=articles
--create=articlesオプションでarticlesテーブルを作成する内容になる。(テーブル名は複数形にする)

・外部キー制約
//$articlesテーブルのuser_idカラムはusersテーブルに存在するidと同じ値しか入れられなくなる->記事は存在するけどそれを投稿したユーザーが存在しないという状態を作れないようにする
$table->foreign('user_id')->references('id')->on('users');`
https://wa3.i-3-i.info/word17575.html

・ユニーク制約
そのテーブル内で他のレコードと同じ値を重複させない。

・モデルの作成
php artisan make:model Article

・Eloquent ORM(Eloquent Object Relational Mapping)
https://qiita.com/gone0021/items/951cd63a7e591e18cd2a

・モデルとモデルのリレーションの追加
1-1 hasOne()
1-many hasMany()
many-1 belongsTo()
many-many belongsToMany()

・$this
クラスのインスタンス自身を指す。
$this->メソッド名()・・・インスタンスが持つメソッドが実行される。
$this->プロパティ名・・・インスタンスが持つプロパティを参照する。

・戻り値の型宣言

・リレーションでの外部キーは、関連するテーブル名の単数形_idであるという前提がある。

・コレクションとは
配列データを操作するための書きやすく使いやすいラッパー。


2.ユーザー登録機能を作ろう

3.ログイン機能を作ろう

4.記事投稿機能を作ろう

5.記事更新・削除・詳細表示機能を作ろう

6.メールを使ったパスワード再設定機能を作ろう

7.いいね機能を作ろう

8.タグ機能を作ろう

9.フォロー機能とユーザーページ機能を作ろう

10.Googleアカウントを使ったユーザー登録ログイン機能を作ろう

11.デバッグバーを使ってSQLを改善しよう