1.記事一覧を作ろう

・ルーティング
Routeファサードのgetメソッド
Route::get('/', 'ArticleController@index');

・データベースから読み込んだデータはLaravelではオブジェクト型として扱われる

・view(ファイル名, [変数名 => 値]); その他withメソッド、compact関数
return view('articles.index', ['articles' => $articles]);

・@yield('title')とyield('content')nには記事一覧のBladeのtitleセクションとcontentセクションの内容が埋め込められる。

@extends() ベースで使うbladeを宣言する

@section('title', '記事一覧), は@yield('title')に対応する

↓

これらを使うことで

・headタグや scriptタグでのCSSやJavaScriptを、各画面のBladeで都度指定しなくて済む

・その一方で、headタグ内のtitleタグの値を、各画面で異なるものにできる

・@include()で別のビューを取り込む


・migrationファイルの作成
php artisan make:migration create_articles_table --create=articles
--create=articlesオプションでarticlesテーブルを作成する内容になる。(テーブル名は複数形にする)

・外部キー制約
//$articlesテーブルのuser_idカラムはusersテーブルに存在するidと同じ値しか入れられなくなる->記事は存在するけどそれを投稿したユーザーが存在しないという状態を作れないようにする
$table->foreign('user_id')->references('id')->on('users');`
https://wa3.i-3-i.info/word17575.html

・ユニーク制約
そのテーブル内で他のレコードと同じ値を重複させない。

・モデルの作成
php artisan make:model Article

・Eloquent ORM(Eloquent Object Relational Mapping)
https://qiita.com/gone0021/items/951cd63a7e591e18cd2a

・モデルとモデルのリレーションの追加
1-1 hasOne()
1-many hasMany()
many-1 belongsTo()
many-many belongsToMany()

・$this
クラスのインスタンス自身を指す。
$this->メソッド名()・・・インスタンスが持つメソッドが実行される。
$this->プロパティ名・・・インスタンスが持つプロパティを参照する。

・戻り値の型宣言

・リレーションでの外部キーは、関連するテーブル名の単数形_idであるという前提がある。

・コレクションとは
配列データを操作するための書きやすく使いやすいラッパー。


2.ユーザー登録機能を作ろう

・Auth::routes();

・php artisan route:list

・トレイト
use トレイト名と記述して使う
汎用性の高い機能をトレイトとしてまとめておき、他の複数のクラスで共通して使う。
Laravelではユーザー登録に関する機能をRegisterUsersトレイととしてまとめておいてくれているので、もしResisterControllerクラス以外にも
ユーザー登録に関するクラスをつくりたい場合でもこのトレイトをしようして効率的に開発できるようになっている。
継承との違い・・・phpでは一つのクラスが別のクラスを2つ以上継承することはできない。
一方、トレイトは幾つでも同時に使用(use)できる。

・三項演算子
式1 ?: 式3
式1がtrueの場合は、式1が値となる
式1がfalseの場合は、式3が値となる

・method_exists(クラス, メソッド名)でクラスに該当するメソッドが存在するか確認する
property_exists()もあるよ

・バリデーション
alpha_num・・・英数字かどうか

unique:users・・・usersテーブルの他のレコードのnameカラムにリクエストされたnameと同じ値がないことをチェックする

・route関数
与えられた名前付きルートのURLを返す。http://localhost/register

@csrf
BladeがHTMLに変換されると以下のような内容になる(valueの値は毎回変わる)
Cross-Site Request Forgeries(クロスサイト・リクエスト・フォージェリ)という脆弱性からWebサービスを守るためのトークン情報。
POSTメソッドのリクエストを受け付ける際にこの情報を見て不正なリクエストでないかどうかをチェックする
<input type="hidden" name="_token" value="xwwDXDKEEnPoCZMF2xMWDtCbpeQgCSNNVIINugCA">

old関数
引数にパラメータ名を渡すと、直前のリクエストのパラメータを渡すと直前のリクエストのパラメータを返す。
ユーザー登録処理でバリデーションエラーになると再びユーザー登録画面が表示されますが、特に何も対応していなかった場合、全ての項目が空で表示されて入力を最初からやり直さなければなりません。
old関数を使うことで、入力した内容が保持された状態でユーザー登録画面が表示されるようになり、ユーザーはエラーになった箇所だけを修正すれば良くなります。
ただし、passwordとpassword_confirmationはold関数を使ってもnullが返ります。
そのため、これら入力項目のinputタグに対してはold関数を使っていません。

@guest, @auth 認証ディレクティブ https://readouble.com/laravel/6.x/ja/blade.html#if-statements
@guestから@endguestに囲まれた部分はユーザーがまだログインしていない状態の時のみ処理される。

@authから@endauthに囲まれた部分は、ユーザーがログイン済みの状態の時のみ処理される。

エラ〜メッセージの操作 https://readouble.com/laravel/6.x/ja/validation.html#working-with-error-messages
$errors変数
Illuminate\Support\MessageBagクラスのインスタンスであり、バリデーションエラーメッセージを配列で持っています。
以下のコードでは、MessageBagクラスのanyメソッドを使っていますが、これはエラーメッセージの有無を返します。
@if ($errors->any())

・バリデーションエラメッセージの日本語化
1, https://readouble.com/laravel/6.x/ja/validation-php.html からb日本語のバリデーション用ファイルを作成し、laravel/resources/lang/jaに配置
2 laravel/config/app.php 'locale' => 'ja'に変更
3, laravel/resources/lang/ja/validation.php 項目名を$attributesに連想配列で指定する。

3.ログイン機能を作ろう

4.記事投稿機能を作ろう

5.記事更新・削除・詳細表示機能を作ろう

6.メールを使ったパスワード再設定機能を作ろう

7.いいね機能を作ろう

8.タグ機能を作ろう

9.フォロー機能とユーザーページ機能を作ろう

10.Googleアカウントを使ったユーザー登録ログイン機能を作ろう

11.デバッグバーを使ってSQLを改善しよう